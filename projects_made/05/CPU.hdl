// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    //decode
    Not(in=instruction[15], out=instA);
    Not(in=instA, out=instD);
   
    //Ainstruction
    And(a=instA, b=instA, out=loadAReg);
   
    //Dinstruction
    And(a=instD, b=instruction[12], out=readMem);
   
    //cmp
    Mux(a=instruction[9], b=false,sel=readMem, out=zyALU);

    //dest
    And(a=instD, b=instruction[5], out=saveARegTmp);
    Or(a=saveARegTmp, b=loadAReg, out=saveAReg);
    And(a=instD, b=instruction[4], out=saveDReg);
    And(a=instD, b=instruction[3], out=saveM);

    //ARegister
    Mux16(a=outALU, b[15]=false, b[0..14]=instruction[0..14], sel=loadAReg, out=toAReg);
    ARegister(in=toAReg, load=saveAReg, out=fromAReg, out[15]=false, out[0..14]=addressM);

    //DRegister
    DRegister(in=outALU, load=saveDReg, out=fromDReg);

    //ALU
    Mux16(a=fromAReg, b=inM, sel=readMem, out=toALU);
    ALU(x=fromDReg,y=toALU,zx=instruction[11], nx=instruction[10], zy=zyALU, ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=zr, ng=ng);

    //writeM
    And(a=instD,b=saveM,out=writeM);


    //create pcload
    Not(in=zr,out=notzr);
    Not(in=ng,out=notng);

    And(a=notzr,b=notng,out=mj3);
    And(a=mj3,b=instruction[0],out=j3out);

    And(a=zr,b=notng,out=mj2);
    And(a=mj2,b=instruction[1],out=j2out);

    And(a=notzr,b=ng,out=mj1);
    And(a=mj1,b=instruction[2],out=j1out);
  
    Or(a=j3out,b=j2out,out=j32out);
    Or(a=j32out,b=j1out,out=j321out);
    And(a=j321out,b=instruction[15],out=pcload);

    //program counter
    PC(in=fromAReg,inc=true,load=pcload,reset=reset,out[15]=pc15,out[0..14]=pc);
}