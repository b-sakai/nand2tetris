function Screen.init 0
push constant 16384
pop static 0
push constant 0
not
pop static 1
push constant 17
call Array.new 1
pop static 2
push constant 0
push static 2
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push static 2
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push static 2
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push static 2
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push static 2
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push static 2
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push static 2
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push static 2
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
push static 2
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 9
push static 2
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 10
push static 2
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 11
push static 2
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 12
push static 2
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 13
push static 2
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 14
push static 2
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 15
push static 2
add
push constant 16384
push constant 16384
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 16
push static 2
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Screen.clearScreen 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 8192
lt
not
if-goto WHILE_END0
push local 0
push static 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 1
push constant 0
return
function Screen.drawPixel 2
push argument 1
push constant 32
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push constant 15
and
push static 2
add
pop pointer 1
push that 0
pop local 1
push static 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push static 0
add
push local 0
push static 0
add
pop pointer 1
push that 0
push local 1
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END0
label IF_FALSE0
push local 0
push static 0
add
push local 0
push static 0
add
pop pointer 1
push that 0
push local 1
not
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END0
push constant 0
return
function Screen.drawLine 0
push argument 1
push argument 3
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push argument 2
call Math.min 2
push argument 0
push argument 2
call Math.max 2
push argument 1
call Screen.drawRightLine 3
pop temp 0
push constant 0
return
label IF_FALSE0
push argument 0
push argument 2
gt
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
push argument 1
push argument 2
push argument 0
sub
push argument 3
push argument 1
sub
call Screen.drawLineAbs 4
pop temp 0
goto IF_END1
label IF_FALSE1
push argument 2
push argument 3
push argument 0
push argument 2
sub
push argument 1
push argument 3
sub
call Screen.drawLineAbs 4
pop temp 0
label IF_END1
push constant 0
return
function Screen.drawLineAbs 4
push constant 0
pop local 0
push constant 0
pop local 1
push argument 3
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
pop local 3
goto IF_END0
label IF_FALSE0
push constant 1
pop local 3
label IF_END0
push constant 0
pop local 2
label WHILE_EXP0
push local 0
push argument 2
gt
not
push local 3
push constant 1
eq
push local 1
push argument 3
gt
not
and
push local 3
push constant 1
neg
eq
push local 1
push argument 3
lt
not
and
or
and
not
if-goto WHILE_END0
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
push local 2
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push constant 1
add
pop local 0
push local 2
push argument 3
push local 3
call Math.multiply 2
add
pop local 2
goto IF_END1
label IF_FALSE1
push local 1
push local 3
add
pop local 1
push local 2
push argument 2
sub
pop local 2
label IF_END1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawRightLine 1
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
pop local 0
push argument 1
pop argument 0
push local 0
pop argument 1
label IF_FALSE0
label WHILE_EXP0
push argument 0
push argument 1
gt
not
not
if-goto WHILE_END0
push argument 0
push argument 2
call Screen.drawPixel 2
pop temp 0
push argument 0
push constant 1
add
pop argument 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawRectangle 0
label WHILE_EXP0
push argument 1
push argument 3
gt
not
not
if-goto WHILE_END0
push argument 0
push argument 2
push argument 1
call Screen.drawRightLine 3
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 2
push argument 2
neg
pop local 1
label WHILE_EXP0
push local 1
push argument 2
gt
not
not
if-goto WHILE_END0
push argument 2
push argument 2
call Math.multiply 2
push local 1
push local 1
call Math.multiply 2
sub
call Math.sqrt 1
pop local 0
push argument 0
push local 0
sub
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawRightLine 3
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
