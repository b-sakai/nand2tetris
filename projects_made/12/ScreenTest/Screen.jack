// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean color;
    static Array bitArray;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;

        let bitArray = Array.new(17);
        let bitArray[0] = 1;
        let bitArray[1] = 2;
        let bitArray[2] = 4;
        let bitArray[3] = 8;
        let bitArray[4] = 16;
        let bitArray[5] = 32;
        let bitArray[6] = 64;
        let bitArray[7] = 128;
        let bitArray[8] = 256;
        let bitArray[9] = 512;
        let bitArray[10] = 1024;
        let bitArray[11] = 2048;
        let bitArray[12] = 4096;
        let bitArray[13] = 8192;
        let bitArray[14] = 16384;
        let bitArray[15] = 16384 + 16384;
        let bitArray[16] = 0;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            let screen[i] = false;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, target;
        let address = (y * 32) + (x / 16);
        
        // x & 15 = x & 0000 0000 0000 1111 = x % 16
        // x番目のみ1である数（2^xを作る）
        // (例:3番目のみ1 = 0000 0000 0000 0010 = 2^3)
        let target = bitArray[x & 15]; // 'x & 15' means 'x mod 16' 

        if (color) {
            let screen[address] = screen[address] | target; // black
        } else {
            let screen[address] = screen[address] & ~target; // white
        }
        return;        
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        // classify right or left
        if (y1 = y2) {
            Screen.drawRightLine(Math.min(x1, x2), Math.min(y1, y2), y1);
            return;
        }
        if (~(x1 > x2)) {
            do Screen.drawLineAbs(x1, y1, x2 - x1, y2 - y1);
        } else {
            do Screen.drawLineAbs(x2, y2, x1 - x2, y1 - y2);           
        }        
        return;
    }

    function void drawLineAbs(int x, int y, int dx, int dy) {
        var int a, b, check, yInc; 
        let a = 0;
        let b = 0;

        if (dy < 0) {
            let yInc = -1;
        } else {
            let yInc = 1;
        }


        let check = 0; // (a * dy * yInc) - (b * dx);
        while (~(a > dx) & ( ((yInc = 1) & ~(b > dy)) | ((yInc = -1) & ~(b < dy)) ) ) {
            do Screen.drawPixel(x + a, y + b);
            if (check < 0) {
                let a = a + 1;
                let check = check + (dy * yInc);
            } else {
                let b = b + yInc;
                let check = check - dx;
            }
        }
        return;
    }

    function void drawRightLine(int x1, int x2, int y) {
        var int temp;

        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }

        while (~(x1 > x2)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 > y2)) {
            do Screen.drawRightLine(x1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;

        let dy = -r;
        while (~(dy > r)) { // dy = -r, -(r-1), ..., -1, 0, 1, ..., r-1, r
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawRightLine(x - dx, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}